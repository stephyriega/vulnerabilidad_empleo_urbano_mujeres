summarise(count_fecha=count())
vacunas <- vacunas |> mutate(count=1)
vacunas
vacunas_new |>
group_by(fecha) |>
summarise(count_fecha=count(count))
vacunas_new <- vacunas |>
group_by(fecha) |>
summarise(count_fecha=count(count))
vacunas_new <- vacunas |>
group_by(fecha) |>
summarise(count_fecha=sum(count))
vacunas_new
vacunas_new
vacunas |> filter(DOSIS== 3)
vacunas_new_2 <- vacunas |>
group_by(DISTRITO) |>
summarise(count_fecha=sum(count))
vacunas_new_2
vacunas <- vacunas |> filter(DOSIS== 3)
vacunas_new_2 <- vacunas |>
group_by(DISTRITO) |>
summarise(count_fecha=sum(count))
vacunas_new_2
print(n=81)
vacunas_new_2.print(n=81)
print(vacunas_new_2, n=81)
install.packages("tidyverse")
library(tidy)
library(tidyverse)
install.packages("dplyr")
install.packages("dplyr")
install.packages("gapminder")
library(gapminder)
data<-gapminder::gapminder
head(data,3)
help(aes())
data |> ggplot()
install.packages("ggplot")
data |> ggplot()
data |> ggplot() + aes(x = lifeExp)
data<-gapminder::gapminder
head(data,3)
install.packages("ggplot2")
#pipe con ctrl+shift+m
data |> ggplot() + aes(x = lifeExp)
data |> ggplot() +
aes(x = lifeExp)
library(tidyverse)
library(ggplot2)
library(gapminder)
data<-gapminder::gapminder
head(data,3)
#data
#aes() : aestetica
#geom_*(): tipo de grafico a construir
## grafico base ----
#pipe con ctrl+shift+m
data |> ggplot() +
aes(x = lifeExp)
data |> ggplot() +
aes(x = lifeExp) +
geom_histogram()
library(dplyr)
data |> ggplot() +
aes(x = lifeExp) +
geom_histogram(binwidth=5,color="white")
hist(data$lifeExp)
hist(data$lifeExp)
### boxplot -----
data |> ggplot() +
aes(x = lifeExp) +
geom_boxplot(binwidth=5,color="white")
### boxplot -----
data |> ggplot() +
aes(x = lifeExp) +
geom_boxplot()
### boxplot -----
data |> ggplot() +
aes(y = lifeExp) +
geom_boxplot()
### boxplot -----
data |> ggplot() +
aes(y = lifeExp) +
geom_boxplot()
library(tidyverse)
library(ggplot2)
library(gapminder)
data<-gapminder::gapminder
head(data,3)
#data
#aes() : aestetica
#geom_*(): tipo de grafico a construir
## grafico base ----
#pipe con ctrl+shift+m
### histograma -----
data |> ggplot() +
aes(x = lifeExp) +
geom_histogram(binwidth=5,color="white")
### boxplot -----
data |> ggplot() +
aes(y = lifeExp) +
geom_boxplot()
dev.off
#install.packages("tidyverse")
#install.packages("dplyr")
#install.packages("gapminder")
library(tidyverse)
library(ggplot2)
library(gapminder)
data<-gapminder::gapminder
head(data,3)
#data
#aes() : aestetica
#geom_*(): tipo de grafico a construir
## grafico base ----
#pipe con ctrl+shift+m
### histograma -----
data |> ggplot() +
aes(x = lifeExp) +
geom_histogram(binwidth=5,color="white")
data |>
ggplot() +
aes(y = lifeExp) +
geom_boxplot(notch = TRUE, color = "blue")
dev.off
#install.packages("gapminder")
library(tidyverse)
library(ggplot2)
library(gapminder)
data<-gapminder::gapminder
head(data,3)
data |>
ggplot() +
aes(y = lifeExp) +
geom_boxplot(notch = TRUE, color = "blue")
library(tidyverse)
library(ggplot2)
library(gapminder)
data<-gapminder::gapminder
head(data,3)
data |> ggplot() +
aes(x = lifeExp) +
geom_histogram(binwidth=5,color="white")
data |> ggplot() +
aes(y = lifeExp) +
geom_boxplot(notch = TRUE, color = "blue")
data |>
ggplot() +
aes(y = lifeExp) +
geom_boxplot(notch = TRUE, color = "blue")
data |>
ggplot() +
aes(x = lifeExp, y=gdpPercap) +
geom_point()
data |>
ggplot() +
aes(x = lifeExp, y=gdpPercap) +
geom_point() +
aes(color = continent) +
geom_smooth()
data |>
filter(country=="Peru", year>1970)
data |>
filter(country=="Peru", year>1970) +
ggplot() +
aes(x=year, y=gdpPercap) +
geom_line() +
geom_point()
data |>
filter(country=="Peru", year>1970) |>
ggplot() +
aes(x=year, y=gdpPercap) +
geom_line() +
geom_point()
data |>
select(country, continent) |>
group_by(continent) |>
filter(!duplicated(country)) |>
ungroup() |>
ggplot() |>
geom_bar()
data |>
select(country, continent) |>
group_by(continent) |>
filter(!duplicated(country)) |>
ungroup() |>
ggplot() +
aes(x=continent) +
geom_bar()
data |>
select(-4, -5) |>
mutate(gdp_cat= case_when (
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc")) |>
filter(year==2007) |>
ggplot() +
aes(x=continent, fill=gdp_cat) +
geom_bar()
data |>
select(-4, -5) |>
mutate(gdp_cat= case_when (
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc")) |>
filter(year==2007) |>
ggplot() +
aes(x=continent, y=gdpPercap) +
aes(color=continent) +
geom_boxplot()
data |>
filter(continent=="Oceania") |>
ggplot() +
aes(x=year, y=lifeExp) +
geom_point() +
aes(color=continent) +
facet_wrap(~continent)
data |>
ggplot() +
aes(x=year, y=lifeExp) +
geom_point() +
aes(color=continent) +
facet_wrap(~continent)
data |>
mutate(gdp_cat=case_when(
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc"))  |>
filter(year==2007) |>
ggplot()+
aes(x=continent, group=gdp_cat, color=gdp_cat)+
stat_summary(aes(y=gdpPercap),
fun ="mean",
geom="point") +
stat_summary(aes(y=gdpPercap),  #<<
fun ="mean",  #<<
geom="line")  #<<
data |>
mutate(gdp_cat=case_when(
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc"))  |>
filter(year==2007) |>
ggplot()+
aes(x=continent, group=gdp_cat, color=gdp_cat)+
stat_summary(aes(y=gdpPercap),
fun ="mean",
geom="point")
data |>
mutate(gdp_cat=case_when(
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc"))  |>
filter(year==2007) |>
ggplot()+
aes(x=continent, group=gdp_cat, color=gdp_cat)+
stat_summary(aes(y=gdpPercap),
fun ="mean",
geom="point") +
stat_summary(aes(y=gdpPercap),  #<<
fun ="mean",  #<<
geom="line")  #<<
data |>
select(-4, -5) |>
mutate(gdp_cat=case_when(
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc")) |>
filter(year==2007) |>
ggplot()+
aes(x=continent)+ aes(y=gdpPercap) +
aes(color=continent) +
geom_boxplot()+
stat_summary(fun ="mean",
colour="red",
size = 5,
geom="point") +
stat_summary(fun ="median",  #<<
colour="blue",  #<<
size = 5,  #<<
geom="point")  #<<
install.packages("gganimate")
install.packages("png")
install.packages("gifski")
install.packages("av")
install.packages("gganimate")
library(gganimate)
data |>
ggplot()+
aes(x = gdpPercap, y = lifeExp,
size = pop, color = country) |>
geom_point(show.legend = F, alpha = 0.7) +
scale_x_log10() +
labs(x = 'GDP Per Capita',
y = 'Life Expectancy') +
scale_size(range = c(2, 15)) +
transition_time(year)+
labs(title = "Producto Bruto Interno vs Esperanza de Vida",
subtitle = "Year:{frame_time}") +
shadow_wake(0.5)
data |>
ggplot()+
aes(x = gdpPercap, y = lifeExp,
size = pop, color = country) |>
geom_point(show.legend = F, alpha = 0.7) +
scale_x_log10() +
labs(x = 'GDP Per Capita',
y = 'Life Expectancy') +
scale_size(range = c(2, 15)) +
transition_time(year)+
labs(title = "Producto Bruto Interno vs Esperanza de Vida",
subtitle = "Year:{frame_time}")
install.packages("ggrepel")
data |>
ggplot()+
aes(x = gdpPercap, y = lifeExp,
size = pop, color = country) |>
geom_point(show.legend = F, alpha = 0.7) +
scale_x_log10() +
labs(x = 'GDP Per Capita',
y = 'Life Expectancy') +
scale_size(range = c(2, 15)) +
transition_time(year)+
labs(title = "Producto Bruto Interno vs Esperanza de Vida",
subtitle = "Year:{frame_time}")
install.packages("packman")
library(pacman)
install.packages("pacman")
library(pacman)
p_load("VIM","DEoptimR","minqa","nloptr","simputation", "mice", "tidyverse", "DMwR2")
help(tao)
data(tao)
head(tao)
summary(tao)
help(NA)
any_na(tao)
anyNA(tao)
p_load("VIM","DEoptimR","minqa","nloptr","simputation", "mice", "tidyverse", "DMwR2", "naniar")
#base de datos libres
help(tao)
data(tao)
head(tao)
summary(tao)
help(NA) #significa "Not Available"
# DIAGNÓSTICO DE DATOS PERDIDOS ----
## Primera identificación ----
# Ver la cantidad y porcentaje de valores perdidos
### Según toda la data -----
# Descriptivo:
anyNA(tao) #si existe variables missing en los datos
any_na(tao) #si existe variables missing en los datos
prop_miss(tao)
pct_miss(tao)
n_complete(tao)
### Según variable -----
miss_var_summary(tao)
miss_var_table(tao)
### Según casos -----
miss_case_summary(tao)
miss_case_table(tao)
## Gráficamente -----
vis_miss(tao) # Primera visualización macro
gg_miss_case(tao) # Número de casos según número de valores perdidos.
gg_miss_upset(tao) #Valores perdidos de acuerdo a posibles combinaciones.
vis_miss(tao) # Primera visualización macro
gg_miss_case(tao) # Número de casos según número de valores perdidos.
gg_miss_upset(tao) #Valores perdidos de acuerdo a posibles combinaciones.
a=aggr(tao,numbers=T)
a
summary(a)
aggr(tao,numbers=T, sortComb=TRUE, sortVar=TRUE, only.miss=TRUE)
matrixplot(tao)
matrixplot(tao)
x11()
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos x11()http://127.0.0.1:46679/graphics/f8926c43-bdee-4bc1-a80a-7553a525cae9.png
x11()
## Mecanismo completamente aleatorio (MCAR)?
## O mecanismo aleatorio (MAR)?
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
matrixplot(tao)
miss_var_table(tao)
miss_var_summary(tao)
vis_miss(tao)
library(psych)
library(tidyverse)
library(ggrepel)
library(factoextra)
# EJERCICIO 1: ACP en un estudio criminológico ------
## PASO 0: Data y subdata----
?USArrests
data<-USArrests
# Crear una subdata con las variables numéricas que se van a utilizar en el ACP
subdata<-USArrests |> select(1,2,4)
View(subdata)
subdata |> ggplot(aes(x=Murder, y=Assault)) + geom_point()
subdata |> ggplot(aes(x=Murder, y=Rape)) + geom_point()
subdata |> ggplot(aes(x=Rape, y=Assault)) + geom_point()
sau
e)
subdata |> ggplot(aes(x=Murder, y=Rape)) + geom_point()
subdata |> ggplot(aes(x=Rape, y=Assault)) + geom_point()
## Para aplicar un PCA, se necesita que los atributos estén correlacionados.
matrixcor<-cor(subdata)
matrixcor
psych::KMO(subdata)
### 2.2 Prueba de Esfericidad de Bartlett ----
library(rela)
### 2.2 Prueba de Esfericidad de Bartlett ----
install.packages(rela)
cortest.bartlett(matrixcor,n=dim(subdata)[1])
scree(subdata, pc=TRUE, factors=FALSE)
### O también el análisis paralelo (utiliza simulaciones con bootstrap).
### En este caso explícitamente nos recomienda un número de componentes.
fa.parallel(subdata,fa="pc")
pc <- prcomp(x=subdata,scale=TRUE, center=TRUE)
summary(pc)
fviz_eig(pc)
#install.packages("pacman")
library(pacman)
p_load("VIM","DEoptimR","minqa","nloptr","simputation", "mice", "tidyverse", "DMwR2", "naniar")
#base de datos libres
help(tao)
data(tao)
head(tao)
summary(tao)
help(NA) #significa "Not Available"
# DIAGNÓSTICO DE DATOS PERDIDOS ----
## Primera identificación ----
# Ver la cantidad y porcentaje de valores perdidos
### Según toda la data -----
# Descriptivo:
any_na(tao) #si existe variables missing en los datos
prop_miss(tao) #promedio de missing
pct_miss(tao) #
n_complete(tao) #
miss_var_summary(tao)
miss_var_table(tao)
### Según casos -----
miss_case_summary(tao)
miss_case_table(tao)
## Gráficamente -----
vis_miss(tao) # Primera visualización macro
gg_miss_case(tao) # Número de casos según número de valores perdidos.
gg_miss_upset(tao) #Valores perdidos de acuerdo a posibles combinaciones.
summary(tao)
setwd("H:/Mi unidad/PUCP/2021-2/TESIS_1")
enaho<-import(".../data/enaho_1_16.dta")
library(rio)
enaho<-import(".../data/enaho_1_16.dta")
setwd("H:/Mi unidad/PUCP/2021-2/TESIS_1/3_datos")
enaho<-import("enaho_1_16.dta")
head(enaho)
any_na(enaho) #si existe variables missing en los datos
help(NA) #significa "Not Available"
# DIAGNÓSTICO DE DATOS PERDIDOS ----
## Primera identificación ----
# Ver la cantidad y porcentaje de valores perdidos
### Según toda la data -----
# Descriptivo:
any_na(enaho) #si existe variables missing en los datos
prop_miss(enaho) #promedio de missing
matrixplot(enaho)
library(pacman)
p_load("VIM","DEoptimR","minqa","nloptr","simputation", "mice", "tidyverse", "DMwR2", "naniar")
any_na(enaho) #si existe variables missing en los datos
prop_miss(enaho) #promedio de missing
pct_miss(enaho) #
n_complete(enaho) #
miss_var_summary(enaho)
miss_var_table(enaho)
miss_case_summary(enaho)
miss_case_table(enaho)
vis_miss(enaho) # Primera visualización macro
vis_miss(enaho, warn_large_data =  FALSE) # Primera visualización macro
# Define the threshold for missing values
missing_threshold <- 0.8
# Identify variables with more than the missing threshold
vars_to_delete <- names(df)[apply(enaho, 2, function(x) sum(is.na(x))/length(x)) > missing_threshold]
vars_to_delete <- names(enaho)[apply(enaho, 2, function(x) sum(is.na(x))/length(x)) > missing_threshold]
